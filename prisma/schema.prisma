// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  name      String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  videos    Video[]  @relation("UserVideos")
  likes     Like[]   @relation("UserLikes")
  following     Follows[] @relation("UserFollowing")
  followers     Follows[] @relation("UserFollowed")
}

model Video {
  id          String   @id @default(uuid())
  s3Key       String   @unique
  caption     String   @default("Video ${id}")
  url         String
  thumbnail   String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("UserVideos", fields: [userId], references: [id])
  likes       Like[]   @relation("VideoLikes")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())

  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  video     Video    @relation("VideoLikes", fields: [videoId], references: [id])
}


model Follows {
  id                String   @id @default(uuid())
  followingUserId   String
  followedUserId    String
  created_at        DateTime @default(now())
  
  followingUser     User     @relation("UserFollowing", fields: [followingUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedUser      User     @relation("UserFollowed", fields: [followedUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
}
